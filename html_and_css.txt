使用HTML描述頁面的結構
  ┌───────────────────────────────────────────────────────────────────┐
  │ <html>                                                            │
  │   <body>                                                          │
  │     <h1>    </h1>                                                 │
  │     <p>     </p>                                                  │
  │     <h2>    </h2>                                                 │
  │     <p>     </p>                                                  │
  │     <h2>    </h2>                                                 │
  │     <p>     </p>                                                  │
  │   </body>                                                         │
  │ </html>                                                           │
  └───────────────────────────────────────────────────────────────────┘

  1. HTML碼是由括弧內的字元所組成的，稱為HTML元素(element)。
  2. 元素通常由兩個標記(tag)所組成
     -- 開始標記和結束標記(結束標記內多了一道斜線)。
     -- 每個HTML元素都會告訴瀏覽器介於開始標記和結束標記之間的一些資訊。
  3. 標記的功用就像容器，描述了介於開始標記和結束標記之間的資訊。

標記詳解
    <p>                              </p>
  └───────┘                        └───────┘
   開始標記                         結束標記
  
  括弧內的字母代表該標記的目的
  例如:
     p代表了段落(paragraph)

  1. 標記(tag)和元素(element)兩詞經常被混用。
  2. 嚴格來說，元素一詞包含了開始標記和結束標記以及兩者之間的所有內容。

屬性為元素做了更多的說明
  1. 屬性(attribute)為元素的內容做了更多的說明。
  2. 它出現在元素的開始標記內，由兩個部分組成:
     屬性名稱和屬性值，以等號分開。
  3. <p lang="en-us">Paragraph in English</p>
        └───┘ └────┘
        屬性名 屬性值
     屬性名稱表明了作者要提供元素內容什麼類型的額外資訊，必須用小寫。
     屬性值是該屬性的資訊或設定值，必須放在雙引號之間，不同的屬性會有不同的值。
  4. 絶大多數的屬性只能用在某些元素上，不過少數的屬性(例如: lang)可以出現在任何元
     素中。
  5. 大部分的屬性值都是預定義的(pre-defined)，或者遵循了一定的規範。

═════════════════════════════════════════════════════════════════════════════
摘要
─────────────────────────────────────────────────────────────────────────────
1. HTML網頁是文字檔
2. HTML使用標記(在兩個角括弧之間的字元)來為它們所包圍的資訊提供特殊意義
3. 標記通常是成對的。開始標記代表了內容的開始，結束標記代表內容的結束
4. 標記常常被稱為元素
5. 開始標記可以承載屬性，以進一步說明該元素的內容
6. 屬性需要一個名稱和一個值
═════════════════════════════════════════════════════════════════════════════

指定不同版本的HTML
  HTML的演化
  
  HTML4    XHTML 1.0                                  HTML 5
  1997     2000
  release  release
  ─────    ───────────────────────────────────────    ──────────────────────────
           1. 因1998年，XML語言問世，HTML4重新規範
              遵循XML的規則，並重新命名為XHTML。這
              也意味著HTML的作者必須使用更新，更嚴
              謹的規則來撰寫HTML
           2. 以下列出幾項較常用到的規則
              A. 所有元素都需要結束標記(除了<img />
                 這樣的結束空白元素之外)
              B. 屬性名稱必須小寫
              C. 所有屬性都必須有一個值，所有的值也
                 都必須放在雙引號內
              D. 不該再使用被淘汰的元素
              E. 在另一個元素內開頭的元素，都必須在
                 同一個元素內結束
           3. 為了幫助網頁作者轉換到新的語法，兩種
              XHTML 1.0 被創造出來
              A. 嚴謹型(strict) XHTML 1.0
                 作者必須一字一句遵守規則
              B. 轉換型(transitional) XHTML 1.0
                 作者依然可以使用外觀元素，例如:
                 <center>和<font>
           4. 轉換型XHTML版本的設計用意是允許作者沿
              用較舊的寫法(較不嚴謹語法)，和一些即將
              被未來HTML版本移除的元素和屬性
  
DOCTYPES
  因為HTML經歷了不同的版本，所以每個網頁一開始都應該要宣告DOCTYPE來告訴瀏覽器，該
  頁使用的HTML版本(不過即使少了這項資訊，瀏覽器還是可以顯示網頁內容)。
  以下為不同版本的宣告方式
  ═════════════════════════════════════════════════════════════════════════════
  HTML 5
  <!DOCTYPE html>
  ─────────────────────────────────────────────────────────────────────────────
  HTML 4
  <!DOCTYPE html PUBLIC
    "-//W3C//DTD HTML 4.01 Transitional//EN"
    "http://www.w3.org/TR/html4/loose.dtd">
  ─────────────────────────────────────────────────────────────────────────────
  Transitional XHTML 1.0
  <!DOCTYPE html PUBLIC
    "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/
     xhtml1-transitional.dtd">
  ─────────────────────────────────────────────────────────────────────────────
  Strict XHTML 1.0
  <!DOCTYPE html PUBLIC
    "-//W3C//DTD XHTML 1.0 Strict//EN"
    "http://www.w3.org/TR/xhtml1/DTD/
     xhtml1-strict.dtd">
  ─────────────────────────────────────────────────────────────────────────────
  XML Declaration
  <?xml version="1.0" ?>

  因為XHTML是用XML寫的，所以有時候可以看到使用XHTML strict DOCTYPE的網頁選擇性地
  以XML宣告作為開頭.如果要使用XML宣告的話，必須將它放在文件的最開始，前面不能有任
  何東西,即使是空格也不行。
  ═════════════════════════════════════════════════════════════════════════════

HTML裡的註解
  如果HTML作者想在原始碼中加入一段使用者瀏覽器看不到的註解，可以將文字加在這些字
  元之間:
  <!-- 文字放在這裡 -->

ID屬性 說明
  1. 每個HTML元素都可以使用id屬性。它的作用是在頁面的所有元素中，將某元素獨立辨識
     出來。
  2. 它的值必須以字母或下底線做開頭(不能使用數字或任何其他字元)。
  3. 同一個頁面上的兩個元素不能有相同的id屬性值。
  4. id屬性是全域屬性(global attribute)，因為它可以用在任何元素上。

CLASS屬性 說明
  1. 每個HTML元素都可以使用class屬性。
  2. 將幾個元素從其他元素中獨立出來。 例如:
     在一篇文章中，有些文字段落的內容比較重要，想要將這些元素區隔出來
  3. 在任何元素上的class屬性都可以共用相同的值。
  4. 在預設值下，使用這些屬性並不影響元素的外觀。只有在CSS規則中表明需要用不同方
     式顯元這些屬性時，它們才會有外觀上的變化。

區塊元素 說明
  1. 有些元素都會在瀏覽器視窗中另起一行，它們稱為區塊層級(block level)元素
  2. 區塊元素的範例包括<h1>,<p>,<ul>及<li>。

行內元素 說明
  1. 有些元素會與鄰近元素保持在同一行，這些稱為行內(inline)元素。
  2. 行內元素的範圍包括<a>,<b>,<em>和<img>。

<div> 將文字和元素群組在區塊中
  1. <div>元素可以將一組元素群組起來,成為一個區塊層級的方塊。
     例如:
     可以製作一個<div>元素來放置網站上所有的版頭元素(logo和瀏覽選單)，
     或者製作一個<div>元素來放置訪客回應。
  2. 在瀏覽器上,<div>元素的內容會另起一行，但是除此之外它在頁面上的呈現並無不同。
  3. 在<div>元素上使用id或class屬性的話，代表要製作CSS樣式規則來表明<div>元素應
     該在螢幕上佔用多少空間，並且改變其所有內容元素旳外觀。
  4. 使用<div>元素來容納頁面的各區，也可以讓管理原始碼的工作更容易。
  5. 因為在<div>元素內可能還會有幾個其他的元素，所以在</div>結束標記後加入一個註
     解也會很實用。

<span> 將文字和元素群組在行內
  1. <span>元素的作用就像<div>元素的行內版本. 它可以使用在下列情況中:
     a. 當沒有適當的元素可以將部分文字和週遭文字區隔出來時，就可以用它來容納這些
        文字。
     b. 容納數個行內元素。
  2. 使用<span>元素最常見的理由，是可以透過CSS來控制這些元素內容的外觀。
  3. <span>元素也會使用id或class屬性
     a. 解釋此<span>元素的目的。
     b. 使得CSS樣式能夠套用到擁有某些屬性值的元素上。

<meta> 頁面相關資訊
  1. <meta>元素位在<head>元素內，包含了網頁的相關資訊。使用者並看不到這些資訊，
     但是它滿足了一些目的，例如:
     告訴搜尋引擎關於此頁, 作者, 是否具時間性等資訊。(如果網頁具時間性，可以將它
     設為過期。)
  2. <meta>元素是一個空白元素，並不需要結束標記。它使用了屬性來承載資訊。
     最常見的屬性就是name和content屬性，兩者通常會一起使用。
     name屬性的值是作者要設定或描述的此頁的特性。
     content屬性的值是作者想給予此特性的值。
     name屬性的值常見的有:
     例如:
     <meta name="description"
        content="An Essay on Installation Art" />
     <meta name="keywords"
        content="installation, art, opinion" />
     <meta name="robots"
        content="nofollow" />
     
     description
       它包含了此頁的描述。這段敍述通常被搜尋引擎利用來了解頁面的內容，最多155個
       字元。有時候它也會出現在搜尋引擎的結果中。

     keywords
       它包含了使用者可能用來搜尋此網頁的字詞清單，字詞之間用逗號分開
       在實際使用上，它對於搜尋引擎索引你的網站已經沒有任可明顯效果。

     robots
       此屬性標明了搜尋引擎是否應該將此頁加到它們的搜尋引擎結果中。如果不應該加入
       的話，可以使用noindex值。如果要訴搜尋引擎加入此頁，但不加入此頁連結的其他
       頁面，那就使用nofollow值。

  3. <meta>元素也使用了成對的http-equiv和content屬性。
     <meta http-equiv="author"
        content="Jon Duckett" />
     <meta http-equiv="pragma"
        content="no-cache" />
     <meta http-equiv="expires"
        content="Fri, 04 Apr 2015 23:59:59 GMT" />

     author
       此屬性標明了網頁的作者。

     pragma
       此屬性避免瀏覽器儲存快取頁面。(也就是將頁面儲存在電腦上，以省下後續造訪時
       的下載時間。)

     expires
       因為瀏覽器會經常快取頁面內容，所以可以使用expirse選項來標明頁面何時過期(不
       應該再快取)。要注意的是必須依上述範例中的格式撰寫。

═════════════════════════════════════════════════════════════════════════════
摘要
─────────────────────────────────────────────────────────────────────────────
1. DOCTYPE告訴瀏覽器你使用的是哪一個版本的HTML。
2. 可以在<!-- 和 -->標記之間為原始碼加入註解。
3. id和class屬性可以讓作者識別特定的元素。
4. <div>和<span>元素可讓作著將區塊層級和行內元素群組起來。
5. <iframe>在網頁上切割出一個窗框，以便在其中顯示其他網頁。
6. <meta>標記讓作者可以提供各種與網頁相關的資訊。
7. 跳脫字元的用途是在頁面中編寫特殊字元，例如: <, >。 
═════════════════════════════════════════════════════════════════════════════
